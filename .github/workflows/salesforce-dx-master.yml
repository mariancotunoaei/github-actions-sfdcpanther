# Unique name for this workflow
name: Validate Against Production Org

# Definition when the workflow should run
on:
    pull_request:
      branches:
      - master
      types: [ closed ] # assigned, opened, synchronize, reopened
      paths-ignore:
        - 'sfdx-project.json'
        - 'README.md'
        - 'SECURITY.md'
        - 'package.json'
        - 'sfdx-project.json'
    workflow_dispatch:

# Jobs to be executed

jobs:

  send-email:
    if: github.event.pull_request.merged == true
    needs: [environment-setup, validate, deploy]
    name: send-email
    runs-on: ubuntu-latest
    steps:
        - name: Send mail
          uses: dawidd6/action-send-mail@v2
          with:
            # mail server settings
            server_address: smtp.gmail.com
            server_port: 465
            # user credentials
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            # email subject
            subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
            # email body as text
            body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
            # comma-separated string, send email to
            to: amit.a.panther@gmail.com
            # from email name
            from: AMIT SINGH
            # Optional unsigned/invalid certificates allowance:
            ignore_cert: true
            # Optional content type (defaults to text/plain):
            content_type: text/html
            # Optional converting Markdown to HTML (set content_type to text/html too):
            convert_markdown: true
  environment-setup:
  
    name: environment-setup
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
    
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        
      - name: 'Setup Node.js environment'
        uses: actions/setup-node@v2.1.5
        with:
            # Set always-auth in npmrc
             always-auth: true
            # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
             node-version: 12
            # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
             architecture: x64
            # Set this option if you want the action to check for the latest available version that satisfies the version spec
             check-latest: true
            # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
             token: ${{ github.token }}
            
  validate:
    name: Validate
    needs: [environment-setup]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:

      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            mkdir sfdx-cli
            tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            ./sfdx-cli/install

      # Run Salesforce CLI Scanner For Security checks
      - name: 'Check for SFDX Update'
        run: sfdx update

      # Install Salesforce CLI Scanner
      - name: 'Install Salesforce CLI Scanner'
        run: sfdx plugins:install @salesforce/sfdx-scanner

      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        
      # Connect with Salesforce ORG
      - name: 'Connect with Salesforce ORG'
        working-directory: .github/jwt/
        run: sfdx auth:jwt:grant --clientid ${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SALESFORCE_USERNAME }} -d --instanceurl ${{ secrets.SFDC_PROD_URL }} --setalias ${{ secrets.PROD_ALIAS }}
  
     # Run Salesforce CLI Scanner For Security checks
      - name: 'List All ORGS'
        run: sfdx force:org:list
        
      # Deploy source to org
      - name: 'Perform the validation against Prod'
        run: sfdx force:source:deploy --checkonly --sourcepath 'force-app/main/default' --testlevel 'NoTestRun' --targetusername 'sfdcpanther-prod-org'

      # Deploy source to org
      - name: 'Perform the Deployment'
        run: sfdx force:source:deploy --sourcepath 'force-app/main/default' --testlevel 'NoTestRun' --targetusername 'sfdcpanther-prod-org'

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: sfdx force:apex:test:run -c -r human --testlevel 'RunLocalTests' -d ./tests/apex -w 20 --targetusername 'sfdcpanther-prod-org' --codecoverage

      # Upload code coverage data
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v1
        with:
            flags: Apex
            
      - name: Send mail
        
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
            # mail server settings
            server_address: smtp.gmail.com
            server_port: 465
            # user credentials
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            # email subject
            subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
            # email body as text
            body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
            # comma-separated string, send email to
            to: sfdcpanther@gmail.com,amit.a.panther@gmail.com
            # from email name
            from: AMIT SINGH
            # Optional unsigned/invalid certificates allowance:
            ignore_cert: true
            # Optional content type (defaults to text/plain):
            content_type: text/html
            # Optional converting Markdown to HTML (set content_type to text/html too):
            convert_markdown: true
            
  deploy:

     needs: [environment-setup, validate]
     name: deploy
     runs-on: ubuntu-latest
     if: github.event.pull_request.merged == true
     steps:

      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            mkdir sfdx-cli
            tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            ./sfdx-cli/install

      # Install Salesforce CLI Scanner
      - name: 'Install Salesforce CLI Scanner'
        run: sfdx plugins:install @salesforce/sfdx-scanner

      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        
      # Run Salesforce CLI Scanner For Security checks
      - name: 'Scan For Security Exceptions'
        run: sfdx scanner:run -c=Security -t=./sfdxsrc -f=json -v

    # Connect with Salesforce ORG
      - name: 'Connect with Salesforce ORG'
        working-directory: .github/jwt/
        run: sfdx auth:jwt:grant --clientid ${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SALESFORCE_USERNAME }} -d --instanceurl ${{ secrets.SFDC_PROD_URL }} --setalias ${{ secrets.PROD_ALIAS }}
  
    # Run Salesforce CLI Scanner For Security checks
      - name: 'List All ORGS'
        run: sfdx force:org:list

    # Deploy source to org
      - name: 'Perform the Deployment'
        run: sfdx force:source:deploy --sourcepath 'force-app/main/default' --testlevel 'NoTestRun' --targetusername 'sfdcpanther-prod-org'

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: sfdx force:apex:test:run -c -r human --testlevel 'RunLocalTests' -d ./tests/apex -w 20 --targetusername 'sfdcpanther-prod-org' --codecoverage

      # Upload code coverage data
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v1
        with:
            flags: Apex
    
     # Assign permissionset
      # - name: 'Assign permissionset to default user'
        # run: sfdx force:user:permset:assign -n recipes
        
     # Send Email if Success
      - name: Send Success-Error Email
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
            # mail server settings
            server_address: smtp.gmail.com
            server_port: 465
            # user credentials
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            # email subject
            subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
            # email body as text
            body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
            # comma-separated string, send email to
            to: sfdcpanther@gmail.com,amit.a.panther@gmail.com
            # from email name
            from: AMIT SINGH
            # Optional unsigned/invalid certificates allowance:
            ignore_cert: true
            # Optional content type (defaults to text/plain):
            content_type: text/html
            # Optional converting Markdown to HTML (set content_type to text/html too):
            convert_markdown: true
            
  # runs-security-check:
  #  name: runs-security-check
  #  runs-on: ubuntu-latest
  #  needs: [validate]
  #  steps:
      # Run Salesforce CLI Scanner For Security checks
  #    - name: 'Scan For Security Exceptions'
  #      run: sfdx scanner:run -c=Security -t=./sfdxsrc -f=json -v
